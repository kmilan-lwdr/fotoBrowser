{"version":3,"sources":["Components/PaginationBar.tsx","Components/InfoOverlay.tsx","Components/ThumbnailImage.tsx","API.ts","Containers/GalleryContainer.tsx","Components/BackButton.tsx","Containers/ViewerContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["_","require","NEIGHBOURS","window","innerWidth","PaginationBar","props","useState","pages","setPages","useEffect","pageData","currentPage","totalPages","buttons","push","start","Math","max","end","min","visiblePages","concat","range","generateButtonArray","Number","queryData","_page","className","map","page","index","pageNo","queryPage","key","to","path","queryString","stringify","InfoOverlay","text","icon","ThumbnailImage","useHover","hovered","bindHover","id","src","url","width","height","alt","placeholderColor","style","display","title","set","onMouseEnter","onMouseLeave","axios","create","baseURL","responseType","timeout","headers","GalleryContainer","thumbnails","totalCount","thumbnailData","setThumbnailData","_limit","albumId","setQueryData","loading","loadingState","setLoadingState","a","queryParams","assign","pick","parse","location","search","keys","queryStr","skipEmptyString","skipNull","API","get","then","response","data","catch","error","console","log","getThumbnails","length","value","thumbnailUrl","ceil","withRouter","onClick","history","goBack","ViewerContainer","image","album","imageData","setImageData","match","params","albumResponse","getImageData","App","basename","component","exact","render","Boolean","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.fe95659f.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport queryString from 'query-string';\r\nimport { QueryParams } from '../Containers/GalleryContainer';\r\nvar _ = require('lodash');\r\n\r\nconst NEIGHBOURS = window.innerWidth <= 760 ? 1 : 2;\r\nconst START = '|<';\r\nconst PREVIOUS = '<';\r\nconst NEXT = '>';\r\nconst END = '>|';\r\nconst BREAK = '...';\r\n\r\ninterface PaginationBarProps {\r\n    queryData: QueryParams;\r\n    totalPages: number;\r\n    path: string;\r\n}\r\n\r\ninterface Pages {\r\n    pages: string[]\r\n}\r\n\r\nexport const PaginationBar: React.FC<PaginationBarProps> = (props: PaginationBarProps) => {\r\n\r\n    const [pages, setPages] = useState<Pages>({pages: []});   \r\n\r\n    useEffect(() => {\r\n\r\n        const generateButtonArray =  (currentPage: number, totalPages: number) => {   \r\n    \r\n            let buttons : string[] = [];\r\n            \r\n            // If current page is not the first, add \"start\" and \"previous\" buttons before the numbered buttons\r\n            if (currentPage > 1 ){\r\n                buttons.push(START);\r\n                buttons.push(PREVIOUS);\r\n            }\r\n    \r\n            // Visible page numbers\r\n            let start = Math.max(1, currentPage - NEIGHBOURS);\r\n            let end = Math.min(totalPages, currentPage + NEIGHBOURS);\r\n            let visiblePages = 1 + 2 * NEIGHBOURS;\r\n\r\n            // Add ... when first page number not visible\r\n            if(start > 1)\r\n            {\r\n                buttons.push(BREAK);\r\n            }\r\n    \r\n            // Always show max visible page numbers if totalPages exceeds it\r\n            if(end < visiblePages && totalPages >= visiblePages)\r\n            {\r\n                end = Math.min(visiblePages, currentPage + 1 + NEIGHBOURS * 2);\r\n            }\r\n            if(start > totalPages  - NEIGHBOURS * 2)\r\n            {\r\n                start = Math.max(1, totalPages  - NEIGHBOURS * 2)\r\n            }\r\n    \r\n            buttons = buttons.concat(_.range(start, end+1));\r\n    \r\n            // Add ... when last page number not visible\r\n            if(end < totalPages)\r\n            {\r\n                buttons.push(BREAK);\r\n            }\r\n    \r\n            // If current page is not the last, add \"end\" and \"next\" -buttons after the numbered buttons\r\n            if (currentPage < totalPages){\r\n                buttons.push(NEXT);\r\n                buttons.push(END);\r\n            }\r\n            \r\n    \r\n            return buttons;\r\n        }\r\n        const pageData = generateButtonArray(Number(props.queryData._page) || 1, Number(props.totalPages));\r\n        setPages({pages: pageData});\r\n\r\n    }, [props.queryData._page, props.totalPages]) \r\n\r\n    return (\r\n        <div className=\"row centered paginationBar\">\r\n            {\r\n                pages.pages.map((page: string, index: number) => {\r\n                    let pageNo;\r\n                    const queryPage : number = Number(props.queryData._page) || 1;\r\n                    switch(page)\r\n                    {\r\n                        case START:\r\n                            pageNo = 1;\r\n                            break;\r\n                        case PREVIOUS:\r\n                            pageNo = queryPage - 1;\r\n                            break;\r\n                        case NEXT:\r\n                            pageNo = queryPage + 1;\r\n                            break;\r\n                        case END:\r\n                            pageNo = props.totalPages;\r\n                            break;\r\n                        case BREAK:\r\n                            return (\r\n                                <span key={index} className=\"break\">{page}</span>\r\n                            );\r\n                        default:\r\n                            pageNo = page;\r\n                    }\r\n                    \r\n                    return (\r\n                        <Link \r\n                            to={props.path + \"?\" + queryString.stringify({...props.queryData, _page: pageNo})} \r\n                            key={index} \r\n                            className={`button ${props.queryData._page === pageNo ? 'active' : ''}`} >\r\n                            {page}\r\n                        </Link>\r\n                    );\r\n                })\r\n            }\r\n\r\n        </div>\r\n    );\r\n    \r\n}\r\n","import React from 'react';\r\n\r\ninterface OverlayProps {\r\n    text: string;\r\n    icon: string;\r\n}\r\n\r\nexport const InfoOverlay: React.FC<OverlayProps> = (props: OverlayProps) => {\r\n    return (\r\n        <div className=\"overlay\">\r\n            <div className=\"text\">\r\n                {props.text}\r\n                <div className={props.icon}/>\r\n            </div>                              \r\n        </div>\r\n    );\r\n}\r\n","import React, { useState} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Image from 'react-graceful-image';\r\n\r\ninterface ThumbnailImageProps {\r\n    id: string;\r\n    alt: string;\r\n    url: string;\r\n    title: string;\r\n}\r\n\r\nexport const ThumbnailImage: React.FC<ThumbnailImageProps> = (props: ThumbnailImageProps) => {\r\n\r\n    const [hovered, bindHover] = useHover();\r\n\r\n    return (\r\n        <Link to={\"/view/\"+props.id}>\r\n            <Image className=\"thumbnail\" \r\n                src={props.url} \r\n                width='150' height='150' \r\n                alt={props.alt}\r\n                placeholderColor='#393d3a'/>\r\n                              \r\n                <div {...bindHover} className=\"titleCard\" style={{display: hovered ? 'block' : 'none'}}>\r\n                    {props.title}\r\n                </div>\r\n                                               \r\n        </Link>\r\n    );\r\n}\r\n\r\nconst useHover = () => {\r\n    const [hovered, set] = useState(false);\r\n    const binder = {\r\n      onMouseEnter: () => set(true),\r\n      onMouseLeave: () => set(false)\r\n    };\r\n    return [hovered, binder];\r\n  }\r\n","import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  baseURL: \"https://jsonplaceholder.typicode.com\",\r\n  responseType: \"json\",\r\n  timeout: 10000,\r\n  headers: {\r\n    'Access-Control-Allow-Origin': '*',\r\n    'Content-Type': 'application/json',\r\n  }            \r\n});","import React, { useState, useEffect } from 'react'\r\nimport { PaginationBar } from '../Components/PaginationBar'\r\nimport { InfoOverlay } from '../Components/InfoOverlay'\r\nimport { ThumbnailImage } from '../Components/ThumbnailImage'\r\nimport queryString from 'query-string';\r\nimport API from '../API';\r\nvar _ = require('lodash');\r\n\r\n// Default fallback limit\r\nconst LIMIT = 40;\r\n\r\ninterface GalleryContainerProps {\r\n    history: any;\r\n    match: any;\r\n    location: any;\r\n}\r\n\r\nexport interface QueryParams {\r\n    _page?: number;\r\n    _limit?: number;\r\n    albumId?: string;\r\n}\r\n\r\ninterface ImageNode {\r\n    id: string;\r\n    title: string;\r\n    thumbnailUrl: string;\r\n    albumId: string;\r\n}\r\n\r\ninterface ThumbnailData {\r\n    thumbnails: ImageNode[];\r\n    totalCount: number;\r\n}\r\n\r\ninterface LoadingState {\r\n    loading: boolean;\r\n}\r\n\r\nexport const GalleryContainer: React.FC<GalleryContainerProps> = (props: GalleryContainerProps) => {\r\n\r\n    const [thumbnailData, setThumbnailData] = useState<ThumbnailData>({\r\n        thumbnails: [],\r\n        totalCount: 1\r\n    });\r\n\r\n    const [queryData, setQueryData] = useState<QueryParams>( {       \r\n        _page: 1,\r\n        _limit: LIMIT,\r\n        albumId: \"\"    \r\n    });\r\n\r\n    const [loadingState, setLoadingState] = useState<LoadingState>({\r\n        loading: true\r\n    });\r\n\r\n    // Fetch thumbnails when search parameters change\r\n    useEffect(() => {\r\n       \r\n        const getThumbnails = async () => {   \r\n            setLoadingState({loading: true});\r\n            \r\n            let queryParams : QueryParams = {       \r\n                _page: 1,\r\n                _limit: LIMIT,\r\n                albumId: \"\"    \r\n            };\r\n            _.assign(queryParams , _.pick(queryString.parse(props.location.search), _.keys(queryParams)));\r\n            const queryStr = \"?\" + queryString.stringify(queryParams, {skipEmptyString: true, skipNull: true});     \r\n            \r\n            await API\r\n            .get(`/photos${queryStr !== \"?\" ? queryStr : \"\"}`)\r\n            .then(response => {\r\n                setThumbnailData({\r\n                    thumbnails: response.data,\r\n                    totalCount: response.headers[\"x-total-count\"]\r\n                });\r\n                setQueryData(queryParams);\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n            .then(function () {\r\n                setLoadingState({loading: false});\r\n            });\r\n        }\r\n\r\n        getThumbnails();\r\n\r\n    }, [props.location.search]) \r\n\r\n    return  (\r\n        <div className=\"container\">\r\n            {\r\n                loadingState.loading ? (\r\n                    <InfoOverlay text=\"Please wait...\" icon=\"loadingSpinner\"/>\r\n                ) : (\r\n                    thumbnailData.thumbnails.length > 0 ? (\r\n                        <div>\r\n                            <div className=\"row galleryGrid\">\r\n                                {\r\n                                    thumbnailData.thumbnails.map((value: ImageNode, index: number) => \r\n                                        <ThumbnailImage\r\n                                            id={value.id}\r\n                                            url={value.thumbnailUrl}\r\n                                            alt={value.id}\r\n                                            title={value.title}\r\n                                            key={index}\r\n                                        />)\r\n                                }                          \r\n                            </div>\r\n                            \r\n                            <PaginationBar \r\n                                queryData={queryData}\r\n                                totalPages={Math.ceil(thumbnailData.totalCount / (queryData._limit || LIMIT))}\r\n                                path='/gallery'\r\n                            />\r\n                            \r\n                        </div>\r\n                    ) : (\r\n                        <InfoOverlay text=\"Unable to fetch data\" icon=\"failureIcon\"/>\r\n                    )\r\n                )\r\n            }\r\n        </div>\r\n            \r\n    )\r\n}","import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\ninterface IBackButtonProps {\r\n    history: any;\r\n}\r\n\r\nconst BackButton: React.FC<IBackButtonProps> = (props: IBackButtonProps) => (\r\n    <div className=\"button\" onClick={props.history.goBack}>\r\n        Back to gallery       \r\n    </div>\r\n);\r\n    \r\nexport default withRouter(BackButton);\r\n\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport API from '../API';\r\nimport { InfoOverlay } from '../Components/InfoOverlay'\r\nimport Image from 'react-graceful-image'\r\nimport BackButton from '../Components/BackButton'\r\nimport { Link } from 'react-router-dom'\r\n\r\ninterface ViewerContainerProps {\r\n    history: any;\r\n    match: any;\r\n}\r\n\r\ninterface ImageData {\r\n    image: {\r\n        id: string;\r\n        title: string;\r\n        url: string;\r\n    }\r\n    album: {\r\n        id: string;\r\n        title: string;\r\n    };\r\n}\r\n\r\ninterface LoadingState {\r\n    loading: boolean;\r\n}\r\n\r\nexport const ViewerContainer:  React.FC<ViewerContainerProps> = (props: ViewerContainerProps) => {\r\n\r\n    const [imageData, setImageData] = useState<ImageData>({\r\n        image: {\r\n            id: \"\",\r\n            title: \"\",\r\n            url: \"\",\r\n        },\r\n        album: {\r\n            id: \"\",\r\n            title: \"\",\r\n        }\r\n    });\r\n\r\n    const [loadingState, setLoadingState] = useState<LoadingState>({\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        const getImageData = async () => {  \r\n            await API\r\n            .get(`/photos/${props.match.params.id}`)\r\n            .then(async response => {\r\n                await API\r\n                .get(`/albums/${response.data.albumId}`)\r\n                .then(albumResponse => {\r\n                    setImageData({\r\n                        image: response.data,\r\n                        album: albumResponse.data\r\n                    })\r\n                })\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n            .then(function () {\r\n                setLoadingState({loading: false});              \r\n            });\r\n\r\n        }\r\n\r\n        getImageData();\r\n    }, [props.match.params.id]) \r\n\r\n    return (\r\n        <div className=\"container\">\r\n            {\r\n                loadingState.loading ? (\r\n                    <InfoOverlay text=\"Please wait...\" icon=\"loadingSpinner\"/>\r\n                ) : (\r\n                    imageData.image.id ?  (\r\n                    <div>\r\n                        <div className=\"row\">\r\n                            <Image className=\"imageView\"\r\n                                src={imageData.image.url} \r\n                                width='600' height='600' \r\n                                alt={imageData.image.id}\r\n                                placeholderColor='#393d3a'/>    \r\n                            \r\n                        </div>\r\n                        <div className=\"row description\">\r\n                            <div className=\"descriptionRow\">\r\n                                <div className=\"descriptionKey\">Title</div>\r\n                                <div className=\"descriptionValue\"> \r\n                                    {imageData.image.title}\r\n                                </div>\r\n                                </div>\r\n                            <div className=\"descriptionRow\">\r\n                                <div className=\"descriptionKey\">Album</div>\r\n                                <Link to={\"/gallery?albumId=\"+imageData.album.id} className=\"descriptionValue link\"> \r\n                                    {imageData.album.title}\r\n                                </Link>\r\n                            </div>  \r\n                            <div className=\"descriptionRow\">\r\n                                <BackButton/>\r\n                            </div>           \r\n                            \r\n                        </div>\r\n                    </div>\r\n                    ) : (\r\n                        <InfoOverlay text=\"Unable to fetch data\" icon=\"failureIcon\"/>\r\n                    )\r\n                )\r\n            }\r\n        </div>\r\n    )   \r\n}\r\n","import React from 'react';\nimport { Route, Switch, Redirect, HashRouter, Link } from 'react-router-dom'\nimport { GalleryContainer } from './Containers/GalleryContainer';\nimport { ViewerContainer } from './Containers/ViewerContainer';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <HashRouter basename=\"/\">\n        <Link to='/' className=\"AppHeader\">\n          fotoBrowser\n        </Link>\n      \n        <Switch>\n          <Route path=\"/gallery\" component={GalleryContainer} />\n          <Route exact path=\"/\" render={() => (<Redirect to=\"/gallery\" />)} />           \n          <Route path=\"/view/:id\" component={ViewerContainer}/>      \n          <Route path=\"*\" render={() => (<Redirect to=\"/gallery\" />)} />\n        </Switch>\n      </HashRouter>\n      \n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Styles/Styles.scss';\nimport App from './App';\nimport { BrowserRouter as Router}  from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}